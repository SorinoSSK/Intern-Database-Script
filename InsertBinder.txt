    rc = sqlite3_bind_double(stmt, loc_count, current_sensor_data->uptime);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite3_bind_int(stmt, loc_count, current_sensor_data->timestamp);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite3_bind_int(stmt, loc_count, 0);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite3_bind_int(stmt, loc_count, markToSent);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.primary_charging_relay);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.primary_discharge_relay);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.primary_positive_pump);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.primary_negative_pump);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.system_mode);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.system_alarm_status);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.balancing_valve);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.positive_valve);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.negative_valve);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.state_of_charge);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.bcu_voltage);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.bcu_current);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.bcu_power);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.bcu_state_of_charge);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.bcu_mode_status);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.bcu_hydrogen_sensor);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.bcu_leakage_sensor);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.smoke_sensor);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.bcu_ocv);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.bcu_positive_tank_temp);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.bcu_negative_tank_temp);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.positive_tank_high_level_float);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.negative_tank_high_level_float);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.positive_tank_low_level_float);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.negative_tank_low_level_float);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.primary_stack_voltage);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.primary_stack_current);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.primary_stack_positive_pressure_sensor);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.primary_stack_negative_pressure_sensor);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.positive_stack_pressure_delta);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.b1_primary_stack_pressure_delta);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.sensor_temp);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.humidity);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.system0PVEnable);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.system0PVChargePower);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.system0PVTotalPower);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs1InvFreq);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs1InternalTemperature);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.secondary_stack_positive_pressure_sensor);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.secondary_stack_negative_pressure_sensor);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.secondary_stack_voltage);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.secondary_stack_current);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.bcu_leakage_sensor2);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.dc_main_contactor);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pre_charge_relay);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.ac_fan_coil1);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.fluid_fan);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.dcdb_fan);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs1_dc_volts);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs1_dc_batt_current);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs1_dc_inverter_power);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs1_voltage);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs1_current);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs1_reactive_power);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs1_load_power);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs1_ac_supply_power);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs1_ac_out_status);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs1_fault_status);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs1_fan_speed);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs1_ac_power);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs2_dc_volts);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs2_dc_batt_current);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs2_dc_inverter_power);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs2_voltage);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs2_current);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs2_reactive_power);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs2_load_power);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs2_ac_supply_power);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs2_ac_out_status);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs2_fault_status);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs2_fan_speed);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs2_ac_power);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs2InvFreq);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs2InternalTemperature);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs3_dc_volts);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs3_dc_batt_current);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs3_dc_inverter_power);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs3_voltage);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs3_current);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs3_reactive_power);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs3_load_power);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs3_ac_supply_power);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs3_ac_out_status);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs3_fault_status);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs3_fan_speed);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs3_ac_power);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs3InvFreq);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pcs3InternalTemperature);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.lib_soc);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.lib_cur);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.lib_vol);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.epic_hsvc);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.epic_auto);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.epic_lscc);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.epic_lsvc);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.epic_enable);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.vfd_1_actual_speed);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.vfd_1_motor_curr);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.vfd_1_motor_vol);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.vfd_1_motor_dcv);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.vfd_2_actual_speed);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.vfd_2_motor_curr);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.vfd_2_motor_vol);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.vfd_2_motor_dcv);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.vfd_3_actual_speed);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.vfd_3_motor_curr);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.vfd_3_motor_vol);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.vfd_3_motor_dcv);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.vfd_4_actual_speed);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.vfd_4_motor_curr);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.vfd_4_motor_vol);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.vfd_4_motor_dcv);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.vfd_5_actual_speed);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.vfd_5_motor_curr);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.vfd_5_motor_vol);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.vfd_5_motor_dcv);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.flt_ppfs);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.flt_pnfs);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.flt_spfs);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.flt_snfs);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.flt_dpfs);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.flt_dnfs);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.smoke_sensor2);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.k3_bkup_sys);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.k4_pri_pump_fb);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.k6_sec_pump_fb);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.k8_in_out_sfb);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.k9_fan_light);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.k10_drain_fb);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.k13_chiller);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.stk_contactor1);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.stk_contactor2);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.backup_sys);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.secondary_positive_pump);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.secondary_negative_pump);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.in_out_sensor_power_sup);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.pri_stack_cluster);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.sec_stack_cluster);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.actuator_valve_1);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.actuator_valve_2);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.actuator_valve_3);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.actuator_valve_4);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.actuator_valve_5);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.actuator_valve_6);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.fan_light);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.drain_pump);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.chiller);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.vfd_1_drive_run);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.vfd_2_drive_run);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.vfd_3_drive_run);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.vfd_4_drive_run);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

    rc = sqlite_bind_double_status(stmt, loc_count, current_sensor_data->battery.vfd_5_drive_run);
    if (rc != SQLITE_OK)
    {
        error.lineNo = __LINE__;
        error.rc = rc;
        return error;
    }
    loc_count++;

